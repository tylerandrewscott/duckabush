#fdat$FUND_STATE<-FUND_STATE
#fdat$FUND_LOCAL<-FUND_LOCAL
#fdat$FUND_FED<-FUND_FED
#TRANSFORM GOAL-FORMALIZATION VARIABLE
FORM_OBJECT<-rep(0,nrow(fdat))
fdat$OBJECTIVE_SETTING<-tolower(fdat$OBJECTIVE_SETTING)
FORM_OBJECT[grep('mission',fdat$OBJECTIVE_SETTING)]<-'MISSION'
FORM_OBJECT[grep('goal',fdat$OBJECTIVE_SETTING)]<-'GOALS'
FORM_OBJECT[grep('object',fdat$OBJECTIVE_SETTING)]<-'OBJECTIVES'
fdat$FORM_OBJECT<-FORM_OBJECT
fdat$FORM_OBJECT[fdat$GROUP==1&fdat$FORM_OBJECT=='0']<-'MISSION'
#CLEAN UP COORDINATOR VARIABLE, NAME NEW VARIABLE 'FACILITATE'
FACILITATE<-rep(0,nrow(fdat))
fdat$COORDINATOR<-tolower(fdat$COORDINATOR)
FACILITATE[grep('yes',fdat$COORDINATOR)]<-1
fdat$FACILITATE<-FACILITATE
#CLEAN UP INTER-BOUNDARY VARIABLES
fdat$INTERSTATE<-ifelse(is.na(fdat$INTERSTATE)==TRUE,0,ifelse(fdat$INTERSTATE==1,1,0))
fdat$INTERNAT<-ifelse(is.na(fdat$INTERNAT)==TRUE,0,ifelse(fdat$INTERNAT==1,1,0))
fdat$OTHERSTATES<-ifelse(is.na(fdat$OTHERSTATES)==TRUE,0,ifelse(fdat$OTHERSTATES==1,1,0))
fdat$OTHERNAT<-ifelse(is.na(fdat$OTHERNAT)==TRUE,0,ifelse(fdat$OTHERNAT==1,1,0))
fdat$TRANS_BOUND<-ifelse(fdat$INTERSTATE==1|fdat$INTERNAT==1,1,0)
fdat$CROSS_BOUND<-ifelse(fdat$OTHERSTATES==1|fdat$OTHERNAT==1,1,0)
#clean up bylaws existence
fdat$HAS_BYLAWS<-ifelse(is.na(fdat$BYLAWS)==FALSE&fdat$BYLAWS!="",1,0)
#clean up and recode for inclusiveness, make MEM_TOTAL variable
fdat$MEM_TRIBE<-ifelse(is.na(fdat$MEM_TRIBE)==TRUE,0,ifelse(fdat$MEM_TRIBE=="0",0,1))
fdat$MEM_STAKE<-ifelse(is.na(fdat$MEM_STAKE)==TRUE,0,ifelse(fdat$MEM_STAKE=="0",0,1))
fdat$MEM_NGO<-ifelse(is.na(fdat$MEM_NGO)==TRUE,0,ifelse(fdat$MEM_NGO=="0",0,1))
fdat$MEM_STATE<-ifelse(is.na(fdat$MEM_STATE)==TRUE,0,ifelse(fdat$MEM_STATE=="0",0,1))
fdat$MEM_FED<-ifelse(is.na(fdat$MEM_FED)==TRUE,0,ifelse(fdat$MEM_FED=="0",0,1))
fdat$MEM_BUS<-ifelse(is.na(fdat$MEM_BUS)==TRUE,0,ifelse(fdat$MEM_BUS=="0",0,1))
fdat$MEM_AG<-ifelse(is.na(fdat$MEM_AG)==TRUE,0,ifelse(fdat$MEM_AG=="0",0,1))
fdat$MEM_UNIV<-ifelse(is.na(fdat$MEM_UNIV)==TRUE,0,ifelse(fdat$MEM_UNIV=="0",0,1))
fdat$MEM_TOTAL<-fdat$MEM_TRIBE+fdat$MEM_STAKE+fdat$MEM_NGO+fdat$MEM_STATE+fdat$MEM_FED+fdat$MEM_BUS+fdat$MEM_AG+fdat$MEM_UNIV
#clean up for tech body presence
fdat$TECH_BODY<-ifelse(is.na(fdat$TECH_BODY)==TRUE,0,ifelse(fdat$TECH_BODY=="0",0,1))
fdat$GOVERNANCE_BODY<-ifelse(is.na(fdat$GOVERNANCE_BODY)==TRUE,"",fdat$GOVERNANCE_BODY)
for (i in 1:nrow(fdat))
{
if (is.na(fdat$GROUP_FORM[i])==FALSE&fdat$GROUP[i]==1&as.numeric(fdat$GROUP_FORM[i])>=fdat$YEAR[i])
{fdat$GOVERNANCE_BODY[i]<-fdat$GOVERNANCE_BODY[i]}
else {fdat$GOVERNANCE_BODY[i]<-""}
}
#set all huc8 values to 8 digits (add leading 0)
fdat$HUC8<-ifelse(nchar(fdat$HUC8)==7,paste("0",as.character(fdat$HUC8),sep=""),fdat$HUC8)
fdat$HUC4<-substr(fdat$HUC8,1,4)
fdat$HUC6<-substr(fdat$HUC8,1,6)
fdat$XWIDTH<-as.numeric(fdat$XWIDTH)
fdat$STRAHLER<-as.numeric(fdat$STRAHLER)
fdat$W1_HAG<-as.numeric(fdat$W1_HAG)
fdat$W1_HNOAG<-as.numeric(fdat$W1_HNOAG)
fdat$FORM_OBJECT_num<-ifelse(fdat$FORM_OBJECT=="0",0,ifelse(fdat$FORM_OBJECT=="MISSION",1,ifelse(fdat$FORM_OBJECT=="GOALS",2,3)))
#reassign group responsibility, so all samples with NO GROUP and all samples with a group engaged in coordination activites are scored as "coord". This way, when group responsibility is fitted with an interaction term for whether or not a group is active, the effect only "turns on" when there is an active group (so the "NO GROUP" samples assigned a designation of "coord" for Group Responsibility cancel out), allowing the estimated effects to compare either "planning" or "management" to the null of "coordination". This is necessary because all groups engage in some sort of activity, so fitting a term for each type of activity overlaps with the effect of group presence whatsoever
fdat$GROUP_RESP_null<-ifelse(fdat$GROUP_RESPONSIBILITY=="0","coord",fdat$GROUP_RESPONSIBILITY)
#standardize each dependent variables so that effects are comparable
std=function(x){if(length(which(is.na(x)))==0) (x-mean(x))/sd(x) else
(x-mean(x,na.rm=T))/sd(x,na.rm=T)
}
fdat$PTL_stz<-std(fdat$PTL)
fdat$NTL_stz<-std(fdat$NTL)
fdat$MMI_BENT_stz<-std(fdat$MMI_BENT)
fdat$TURB_stz<-std(fdat$TURB)
fdat$XCMGW<-as.numeric(fdat$XCMGW)
fdat$XCMGW_stz<-std(as.numeric(fdat$XCMGW))
fdat$XFC_NAT<-as.numeric(fdat$XFC_NAT)
fdat$XFC_NAT_stz<-std(as.numeric(fdat$XFC_NAT))
fdat$SQ_MILE<-fdat$WSAREA*0.38610
fdat$XWIDTH<-log(fdat$XWIDTH+0.001)
fdat$XELEV<-log(fdat$XELEV+0.001)
fdat$SQ_MILE<-log(fdat$SQ_MILE+0.001)
fdat$PURB<-log(fdat$PURB+0.001)
fdat$PWETL<-log(fdat$PWETL+0.001)
fdat$PFOR<-log(fdat$PFOR+0.001)
fdat$POPDENS<-log(fdat$POPDENS+0.001)
fdat$RDDENS<-log(fdat$RDDENS+0.001)
fdat$W1_HAG<-log(fdat$W1_HAG+0.001)
fdat$W1_HNOAG<-log(fdat$W1_HNOAG+0.001)
fdat$PTL<-log(fdat$PTL+0.001)
fdat$NTL<-log(fdat$NTL+0.001)
fdat$TURB<-log(fdat$TURB+0.001)
fdat$XCMGW<-(fdat$XCMGW^.5)
fdat$XFC_NAT<-(fdat$XFC_NAT^.5)
fdat$MMI_BENT<-(fdat$MMI_BENT)
fdat$ACTIVE_bin<-ifelse(fdat$ACTIVED>0,1,0)
fdat$HUC4<-str_sub(fdat$HUC6,end=4)
temp<-stack(tapply(fdat$ACTIVED,fdat$HUC4,mean));colnames(temp)<-c('meantreat','HUC4')
temp1<-stack(tapply(fdat$ACTIVE_bin,fdat$HUC4,mean));colnames(temp1)<-c('meantreatbin','HUC4')
tempmerge<-merge(temp,temp1,by='HUC4')
fdat<-merge(fdat,tempmerge)
setwd('TScott/Google Drive/duckabush')
fdat$long<-fdat$XLON_DD.x
fdat$lat<-fdat$XLAT_DD.x
fdat$COUNTY<-ifelse(fdat$COUNTY=='Bedford','Bedford County',as.character(fdat$COUNTY))
fdat$COUNTY<-ifelse(fdat$COUNTY=='Dekalb','DeKalb County',as.character(fdat$COUNTY))
fdat$COUNTY<-ifelse(fdat$COUNTY=='Mchenry','McHenry County',as.character(fdat$COUNTY))
fdat$COUNTY<-ifelse(fdat$COUNTY=='Lewis And Clark','Lewis and Clark County',as.character(fdat$COUNTY))
fdat$COUNTY<-ifelse(fdat$COUNTY=='Clay','Clay County',as.character(fdat$COUNTY))
fdat$COUNTY<-ifelse(fdat$COUNTY=='Mclennan','McLennan County',as.character(fdat$COUNTY))
geo.place<-foreach(i = 1:nrow(fdat)) %do% geo.make(state=as.character(fdat$STATE[i]),
county=as.character(fdat$COUNTY[i]))
county.med.income<-llply(.data=geo.place,.progress='text',
.fun=acs.fetch,endyear=2011,span=5,table.number='B19301')
#All workers >16
county.tot.workers<-llply(.data=geo.place,.progress='text',col.names='pretty',
.fun=acs.fetch,endyear=2011,span=5,
table.number='B99241',variable='B99241_001')
#Agriculture, Forestry, Fishing And Hunting, And Mining
county.nat.workers<-llply(.data=geo.place,.progress='text',col.names='pretty',
.fun=acs.fetch,endyear=2011,span=5,
table.number='C24050',variable='C24050_002')
setwd('TScott/Google Drive/duckabush/elpo08p020_nt00335')
elec = readOGR(dsn='TScott/Google Drive/duckabush/elpo08p020_nt00335',
layer="elpo08p020")
elec@data$id = rownames(elec@data)
elec.points = ggplot2::fortify(elec, region="id")
elec.df = join(elec.points, elec@data, by="id")
elec.sub.df<-elec.df[elec.df$STATE!='HI'&elec.df$STATE!='AK',]
elec.sub.df$COUNTY_STATE<-paste(tolower(elec.sub.df$COUNTY),elec.sub.df$STATE,sep=', ')
elec.sub.df$COUNTY_STATE<-(gsub(' COUNTY','',elec.sub.df$COUNTY_STATE))
elec.sub.df$COUNTY_STATE<-(gsub(' parish','',elec.sub.df$COUNTY_STATE))
elec.sub.df<-elec.sub.df[duplicated(elec.sub.df$COUNTY_STATE)==FALSE,]
elec.sub.df$COUNTY_STATE<-gsub(' county', '',elec.sub.df$COUNTY_STATE)
fdat$COUNTY_STATE<-paste(tolower(fdat$COUNTY),fdat$STATE,sep=', ')
fdat$COUNTY_STATE<-gsub('st. ','saint ',fdat$COUNTY_STATE)
fdat$COUNTY_STATE<-gsub('foresaint','forest,',fdat$COUNTY_STATE)
fdat$COUNTY_STATE<-gsub(' county','',fdat$COUNTY_STATE)
temp<-data.frame(as.numeric(as.character(elec.sub.df$PERCENT_DE)),
as.numeric(as.character(elec.sub.df$PERCENT_RE)),
as.character(elec.sub.df$COUNTY_STATE))
colnames(temp)<-c("PERCENT_DE",'PERCENT_RE','COUNTY_STATE')
temp$COUNTY_STATE<-as.character(temp$COUNTY_STATE)
temp2<-join(fdat,temp,by='COUNTY_STATE')
fdat<-temp2
county.nat.work.est<-laply(county.nat.workers,estimate)
county.tot.work.est<-laply(county.tot.workers,acs::estimate)
county.nat.work.est.prop<-county.nat.work.est/county.tot.work.est
county.med.income.est<-laply(county.med.income,estimate)
county.vars<-data.frame(
fdat$COUNTY_STATE,
county.nat.work.est,county.tot.work.est,county.nat.work.est.prop,county.med.income.est)
colnames(county.vars)<-c('COUNTY_STATE',colnames(county.vars)[2:5])
county.vars$COUNTY_STATE<-as.character(county.vars$COUNTY_STATE)
fdat<-cbind(fdat,county.vars[,-1])
fdat$GROUP[is.na(fdat$GROUP)]<-0
setwd('TScott/Google Drive/duckabush')
state.fund<-read.csv('state_2007_funding.csv')
colnames(state.fund)<-c('STATE','Function','Total.Pay','Full.Time.Equivalent')
state07.total<-subset(state.fund,Function=='Total')
state07.resparks<-subset(state.fund,Function!='Total')
tem<-stack(tapply(state07.resparks$Total.Pay,state07.resparks$STATE,sum))
colnames(tem)<-c('resparks.spend','STATE')
state07.spend<-join(state07.total,tem)
state07.spend$resparks.ratio<-state07.spend$resparks.spend/state07.spend$Total.Pay
state.df<-data.frame(cbind(state.abb,state.name))
colnames(state.df)<-c('state.abb','STATE')
state07.spend<-join(state07.spend,state.df)
colnames(state07.spend)<-c('sname','Function','Total.Pay','Full.Time.Equivalent',
'resparks.spend','resparks.ratio','STATE')
fdat<-join(fdat,state07.spend)
fdat$county.med.income.est.mc<-(fdat$county.med.income.est-mean(fdat$county.med.income.est))/1000
fdat$county.nat.work.est.prop<-log(fdat$county.nat.work.est.prop)
fdat$PERCENT_DE<-fdat$PERCENT_DE-mean(fdat$PERCENT_DE)
fdat$resparks.ratio<-fdat$resparks.ratio-mean(fdat$resparks.ratio)
write.csv(fdat,'model.dat.csv')
save.image("dat.lmer.mods.RData")
rm(list=ls())
library(stringr)
library(stringr)
library(lme4)
library(LMERConvenienceFunctions)
library(mapproj)
library(ggmap)
#library(DeducerSpatial)
library(UScensus2010)
library(rgdal) # librarys sp, will use proj.4 if installed
library(acs)
library(plyr)
library(doParallel)
#require(pbkrtest)
#library(arm)
#library(blme)
#install.packages('pbkrtest')
#require(ggplot2)
#require(plyr)
#require(Hmisc)
mdat<-data.frame(read.csv("TScott/Google Drive/duckabush/management_data_v2.csv",header=TRUE))
for (i in 1:ncol(mdat))
{
mdat[,i]<-(mdat[,i])
}
edat<-(read.csv("TScott/Google Drive/duckabush/ready_to_model_dat.csv",header=TRUE))
for (i in 1:ncol(edat))
{
edat[,i]<-(edat[,i])
}
t1<-(mdat[mdat$SURVEY=='nrsa',])
t2<-(mdat[mdat$SURVEY=='wsa',])
t1<-t1[order(t1$CON_ID),]
t2<-t2[order(t2$CON_ID),]
t1[,1:47]<-t2[,1:47]
ttdat<-rbind(t1,t2)
ttdat$GROUP<-as.numeric(ttdat$GROUP)
#temp=merge(edat,mdat,by=c("CON_ID","SURVEY","HUC8","FED_OWN","UrbanCat","FW_ECO3","YEAR","FW_ECO9","COUNTY","VISIT_NO",
#"STATE","MISS_SUB","ECOREPORT","ECO3","STRATUM","MAJ_BAS_NM","STRAHLER","EPAREG","ID","VISIT","FSEASTWEST",
#"LOC_NAME","WSAREA","XLAT_DD","XLON_DD"),all.x=TRUE)
temp=merge(edat,ttdat,by=c("CON_ID","SURVEY","YEAR","FW_ECO3","FW_ECO9",'STATE','EPAREG','COUNTY','STRAHLER','ECO3','HUC8','UrbanCat','WSAREA','MAJ_BAS_NM'),all.x=TRUE)
fdat = temp
fdat$FED_OWN<-relevel(as.factor(fdat$FED_OWN.y),ref="Non Federal")
fdat$SURVEY<-relevel(factor(fdat$SURVEY),ref="wsa")
fdat$YEAR<-as.numeric(fdat$YEAR)
fdat$GROUP_FORM<-as.numeric(fdat$GROUP_FORM)
fdat$GROUP_FORM<-ifelse(is.na(fdat$GROUP_FORM)==TRUE,0,fdat$GROUP_FORM)
#IS GROUP ACTIVE0 AT TIME OF SAMPLING?
#"ACTIVE0_GROUP" IF GROUP PRESENT IN YEAR OF SAMPLING
fdat$GROUP_FORM_lag0<-fdat$GROUP_FORM+0
fdat$ACTIVE0_GROUP<-ifelse(fdat$YEAR>=(fdat$GROUP_FORM_lag0)&fdat$GROUP_FORM_lag0!=0,1,0)
fdat$ACTIVE0<-fdat$ACTIVE0_GROUP
#IS GROUP ACTIVE5 AT TIME OF SAMPLING?
#"ACTIVE5_GROUP" IF GROUP PRESENT IN YEAR OF SAMPLING
fdat$GROUP_FORM_lag5<-fdat$GROUP_FORM+5
fdat$ACTIVE5_GROUP<-ifelse(fdat$YEAR>=(fdat$GROUP_FORM_lag5)&fdat$GROUP_FORM_lag5!=5,1,0)
fdat$ACTIVE5<-fdat$ACTIVE5_GROUP
#IS GROUP ACTIVE10 AT TIME OF SAMPLING?
#"ACTIVE10_GROUP" IF GROUP PRESENT IN YEAR OF SAMPLING
fdat$GROUP_FORM_lag10<-fdat$GROUP_FORM+10
fdat$ACTIVE10_GROUP<-ifelse(fdat$YEAR>=(fdat$GROUP_FORM_lag10)&fdat$GROUP_FORM_lag10!=10,1,0)
fdat$ACTIVE10<-fdat$ACTIVE10_GROUP
#HOW LONG HAS GROUP BEEN ACTIVE5?
#"GROUP_DURATION" is number of years group has been active. GROUP_DURATION=1 IF FOUNDED SAME YEAR AS SAMPLE
fdat$YEAR<-as.numeric(fdat$YEAR)
fdat$GROUP_FORM<-as.numeric(fdat$GROUP_FORM)
fdat$GROUP_DURATION<-rep(0,nrow(fdat))
for (i in 1:nrow(fdat))
{
if (fdat$GROUP_FORM[i]!=0)
{
fdat$GROUP_DURATION[i] = fdat$YEAR[i] - fdat$GROUP_FORM[i]
}
else {fdat$GROUP_DURATION[i]=0}
fdat$GROUP_DURATION[i]<-ifelse(fdat$GROUP_DURATION[i]<0,0,fdat$GROUP_DURATION[i])
}
fdat$ACTIVED<-fdat$GROUP_DURATION
fdat$STRAHLER<-as.numeric(fdat$STRAHLER)
fdat$PTL<-as.numeric(fdat$PTL)
fdat$NTL<-as.numeric(fdat$NTL)
fdat$PURB<-as.numeric(fdat$PURB)
fdat$PURB_std<-as.numeric(fdat$PURB)
fdat$PFOR<-as.numeric(fdat$PFOR)
fdat$PWETL<-as.numeric(fdat$PWETL)
fdat$POPDENS<-as.numeric(fdat$POPDENS)
fdat$GROUP<-as.numeric(fdat$GROUP)
fdat$RDDENS<-as.numeric(fdat$RDDENS)
fdat$XELEV<-as.numeric(fdat$XELEV)
fdat$W1_HALL<-as.numeric(fdat$W1_HALL)
fdat$MMI_BENT<-as.numeric(fdat$MMI_BENT)
fdat$TSS<-as.numeric(fdat$TSS)
fdat$TURB<-as.numeric(fdat$TURB)
fdat$HABT_PT<-as.numeric(fdat$HABT_PT)
#create mean for popdens by major basin to impute for NAs
MEAN_POPDENS<-tapply(na.omit(as.numeric(fdat$POPDENS)),subset(fdat$MAJ_BAS_NM,!is.na(fdat$POPDENS)),mean)
for (i in 1:nrow(fdat)){if (is.na(fdat$POPDENS[i])==TRUE){fdat$POPDENS[i] <- MEAN_POPDENS[which(names(MEAN_POPDENS)==fdat$MAJ_BAS_NM[i])]}}
#create mean for percent urban land area by major basin to impute for NAs
MEAN_PURB<-tapply(na.omit(as.numeric(fdat$PURB)),subset(fdat$MAJ_BAS_NM,!is.na(fdat$PURB)),mean)
for (i in 1:nrow(fdat)){if (is.na(fdat$PURB[i])==TRUE){fdat$PURB[i] <- MEAN_PURB[which(names(MEAN_PURB)==fdat$MAJ_BAS_NM[i])]}}
#create mean for percent forested (PFOR) land area by major basin to impute for NAs
MEAN_PFOR<-tapply(na.omit(as.numeric(fdat$PFOR)),subset(fdat$MAJ_BAS_NM,!is.na(fdat$PFOR)),mean)
for (i in 1:nrow(fdat)){if (is.na(fdat$PFOR[i])==TRUE){fdat$PFOR[i] <- MEAN_PFOR[which(names(MEAN_PFOR)==fdat$MAJ_BAS_NM[i])]}}
#create mean for percent wetlands (PWETL) land area by major basin to impute for NAs
MEAN_PWETL<-tapply(na.omit(as.numeric(fdat$PWETL)),subset(fdat$MAJ_BAS_NM,!is.na(fdat$PWETL)),mean)
for (i in 1:nrow(fdat)){if (is.na(fdat$PWETL[i])==TRUE){fdat$PWETL[i] <- MEAN_PWETL[which(names(MEAN_PWETL)==fdat$MAJ_BAS_NM[i])]}}
#create mean for percent road density (RRDENS) by major basin to impute for NAs
MEAN_RDDENS<-tapply(na.omit(as.numeric(fdat$RDDENS)),subset(fdat$MAJ_BAS_NM,!is.na(fdat$RDDENS)),mean)
for (i in 1:nrow(fdat)){if (is.na(fdat$RDDENS[i])==TRUE){fdat$RDDENS[i] <- MEAN_RDDENS[which(names(MEAN_RDDENS)==fdat$MAJ_BAS_NM[i])]}}
#create mean for elevation (XELEV) by major basin to impute for NAs
MEAN_XELEV<-tapply(na.omit(as.numeric(fdat$XELEV)),subset(fdat$MAJ_BAS_NM,!is.na(fdat$XELEV)),mean)
for (i in 1:nrow(fdat)){if (is.na(fdat$XELEV[i])==TRUE){fdat$XELEV[i] <- MEAN_XELEV[which(names(MEAN_XELEV)==fdat$MAJ_BAS_NM[i])]}}
#library(devtools);
#install_github('mrp', 'malecki', sub='mrpdata');
#install_github(mrp”, “malecki”, sub=”mrp”)
#REPLACE NA'S IN WATERSHED AREA (A FEW MISSING IN NRSA SET, NOT MISSING IN WSA)
AREA<-fdat$WSAREA
for (i in 1:nrow(fdat))
{
if (is.na(fdat$WSAREA[i])==TRUE){AREA[i]<-ifelse(is.na(fdat$LANDAREA[i])==FALSE,fdat$LANDAREA[i],fdat$LANDAREA[fdat$CON_ID==fdat$CON_ID[i]&fdat$SURVEY=='wsa'])}
}
fdat$WSAREA<-as.numeric(AREA)
#MAKE INDICATOR VARIABLES FOR GROUP ACTIVITY/RESPONSIBILITY
temp<-rep(0,length(fdat$CON_ID))
fdat$ENGAGED_IN<-tolower(fdat$ENGAGED_IN)
temp[grep('coordin',fdat$ENGAGED_IN)]<-1
temp[grep('outreach',fdat$ENGAGED_IN)]<-1
temp[grep('education',fdat$ENGAGED_IN)]<-1
temp[grep('plan',fdat$ENGAGED_IN)]<-2
temp[grep('monitor',fdat$ENGAGED_IN)]<-2
temp[grep('advis',fdat$ENGAGED_IN)]<-2
temp[grep('project',fdat$ENGAGED_IN)]<-3
temp[grep('manag',fdat$ENGAGED_IN)]<-3
fdat$GROUP_RESPONSIBILITY<-temp
#TRANSFORM FUNDING VARIABLE
#FUND_STATE<-rep(0,nrow(fdat))
#FUND_FED<-rep(0,nrow(fdat))
#FUND_LOCAL<-rep(0,nrow(fdat))
#for (i in 1:nrow(fdat))
#{if (length(grep("local",fdat$FUNDING[i]))>0){FUND_LOCAL[i]=1}
# if (length(grep("federal",fdat$FUNDING[i]))>0){FUND_FED[i]=1}
# if (length(grep("state",fdat$FUNDING[i]))>0){FUND_STATE[i]=1}}
#fdat$FUND_STATE<-FUND_STATE
#fdat$FUND_LOCAL<-FUND_LOCAL
#fdat$FUND_FED<-FUND_FED
#TRANSFORM GOAL-FORMALIZATION VARIABLE
FORM_OBJECT<-rep(0,nrow(fdat))
fdat$OBJECTIVE_SETTING<-tolower(fdat$OBJECTIVE_SETTING)
FORM_OBJECT[grep('mission',fdat$OBJECTIVE_SETTING)]<-'MISSION'
FORM_OBJECT[grep('goal',fdat$OBJECTIVE_SETTING)]<-'GOALS'
FORM_OBJECT[grep('object',fdat$OBJECTIVE_SETTING)]<-'OBJECTIVES'
fdat$FORM_OBJECT<-FORM_OBJECT
fdat$FORM_OBJECT[fdat$GROUP==1&fdat$FORM_OBJECT=='0']<-'MISSION'
#CLEAN UP COORDINATOR VARIABLE, NAME NEW VARIABLE 'FACILITATE'
FACILITATE<-rep(0,nrow(fdat))
fdat$COORDINATOR<-tolower(fdat$COORDINATOR)
FACILITATE[grep('yes',fdat$COORDINATOR)]<-1
fdat$FACILITATE<-FACILITATE
#CLEAN UP INTER-BOUNDARY VARIABLES
fdat$INTERSTATE<-ifelse(is.na(fdat$INTERSTATE)==TRUE,0,ifelse(fdat$INTERSTATE==1,1,0))
fdat$INTERNAT<-ifelse(is.na(fdat$INTERNAT)==TRUE,0,ifelse(fdat$INTERNAT==1,1,0))
fdat$OTHERSTATES<-ifelse(is.na(fdat$OTHERSTATES)==TRUE,0,ifelse(fdat$OTHERSTATES==1,1,0))
fdat$OTHERNAT<-ifelse(is.na(fdat$OTHERNAT)==TRUE,0,ifelse(fdat$OTHERNAT==1,1,0))
fdat$TRANS_BOUND<-ifelse(fdat$INTERSTATE==1|fdat$INTERNAT==1,1,0)
fdat$CROSS_BOUND<-ifelse(fdat$OTHERSTATES==1|fdat$OTHERNAT==1,1,0)
#clean up bylaws existence
fdat$HAS_BYLAWS<-ifelse(is.na(fdat$BYLAWS)==FALSE&fdat$BYLAWS!="",1,0)
#clean up and recode for inclusiveness, make MEM_TOTAL variable
fdat$MEM_TRIBE<-ifelse(is.na(fdat$MEM_TRIBE)==TRUE,0,ifelse(fdat$MEM_TRIBE=="0",0,1))
fdat$MEM_STAKE<-ifelse(is.na(fdat$MEM_STAKE)==TRUE,0,ifelse(fdat$MEM_STAKE=="0",0,1))
fdat$MEM_NGO<-ifelse(is.na(fdat$MEM_NGO)==TRUE,0,ifelse(fdat$MEM_NGO=="0",0,1))
fdat$MEM_STATE<-ifelse(is.na(fdat$MEM_STATE)==TRUE,0,ifelse(fdat$MEM_STATE=="0",0,1))
fdat$MEM_FED<-ifelse(is.na(fdat$MEM_FED)==TRUE,0,ifelse(fdat$MEM_FED=="0",0,1))
fdat$MEM_BUS<-ifelse(is.na(fdat$MEM_BUS)==TRUE,0,ifelse(fdat$MEM_BUS=="0",0,1))
fdat$MEM_AG<-ifelse(is.na(fdat$MEM_AG)==TRUE,0,ifelse(fdat$MEM_AG=="0",0,1))
fdat$MEM_UNIV<-ifelse(is.na(fdat$MEM_UNIV)==TRUE,0,ifelse(fdat$MEM_UNIV=="0",0,1))
fdat$MEM_TOTAL<-fdat$MEM_TRIBE+fdat$MEM_STAKE+fdat$MEM_NGO+fdat$MEM_STATE+fdat$MEM_FED+fdat$MEM_BUS+fdat$MEM_AG+fdat$MEM_UNIV
#clean up for tech body presence
fdat$TECH_BODY<-ifelse(is.na(fdat$TECH_BODY)==TRUE,0,ifelse(fdat$TECH_BODY=="0",0,1))
fdat$GOVERNANCE_BODY<-ifelse(is.na(fdat$GOVERNANCE_BODY)==TRUE,"",fdat$GOVERNANCE_BODY)
for (i in 1:nrow(fdat))
{
if (is.na(fdat$GROUP_FORM[i])==FALSE&fdat$GROUP[i]==1&as.numeric(fdat$GROUP_FORM[i])>=fdat$YEAR[i])
{fdat$GOVERNANCE_BODY[i]<-fdat$GOVERNANCE_BODY[i]}
else {fdat$GOVERNANCE_BODY[i]<-""}
}
#set all huc8 values to 8 digits (add leading 0)
fdat$HUC8<-ifelse(nchar(fdat$HUC8)==7,paste("0",as.character(fdat$HUC8),sep=""),fdat$HUC8)
fdat$HUC4<-substr(fdat$HUC8,1,4)
fdat$HUC6<-substr(fdat$HUC8,1,6)
fdat$XWIDTH<-as.numeric(fdat$XWIDTH)
fdat$STRAHLER<-as.numeric(fdat$STRAHLER)
fdat$W1_HAG<-as.numeric(fdat$W1_HAG)
fdat$W1_HNOAG<-as.numeric(fdat$W1_HNOAG)
fdat$FORM_OBJECT_num<-ifelse(fdat$FORM_OBJECT=="0",0,ifelse(fdat$FORM_OBJECT=="MISSION",1,ifelse(fdat$FORM_OBJECT=="GOALS",2,3)))
#reassign group responsibility, so all samples with NO GROUP and all samples with a group engaged in coordination activites are scored as "coord". This way, when group responsibility is fitted with an interaction term for whether or not a group is active, the effect only "turns on" when there is an active group (so the "NO GROUP" samples assigned a designation of "coord" for Group Responsibility cancel out), allowing the estimated effects to compare either "planning" or "management" to the null of "coordination". This is necessary because all groups engage in some sort of activity, so fitting a term for each type of activity overlaps with the effect of group presence whatsoever
fdat$GROUP_RESP_null<-ifelse(fdat$GROUP_RESPONSIBILITY=="0","coord",fdat$GROUP_RESPONSIBILITY)
#standardize each dependent variables so that effects are comparable
std=function(x){if(length(which(is.na(x)))==0) (x-mean(x))/sd(x) else
(x-mean(x,na.rm=T))/sd(x,na.rm=T)
}
fdat$PTL_stz<-std(fdat$PTL)
fdat$NTL_stz<-std(fdat$NTL)
fdat$MMI_BENT_stz<-std(fdat$MMI_BENT)
fdat$TURB_stz<-std(fdat$TURB)
fdat$XCMGW<-as.numeric(fdat$XCMGW)
fdat$XCMGW_stz<-std(as.numeric(fdat$XCMGW))
fdat$XFC_NAT<-as.numeric(fdat$XFC_NAT)
fdat$XFC_NAT_stz<-std(as.numeric(fdat$XFC_NAT))
fdat$SQ_MILE<-fdat$WSAREA*0.38610
fdat$XWIDTH<-log(fdat$XWIDTH+0.001)
fdat$XELEV<-log(fdat$XELEV+0.001)
fdat$SQ_MILE<-log(fdat$SQ_MILE+0.001)
fdat$PURB<-log(fdat$PURB+0.001)
fdat$PWETL<-log(fdat$PWETL+0.001)
fdat$PFOR<-log(fdat$PFOR+0.001)
fdat$POPDENS<-log(fdat$POPDENS+0.001)
fdat$RDDENS<-log(fdat$RDDENS+0.001)
fdat$W1_HAG<-log(fdat$W1_HAG+0.001)
fdat$W1_HNOAG<-log(fdat$W1_HNOAG+0.001)
fdat$PTL<-log(fdat$PTL+0.001)
fdat$NTL<-log(fdat$NTL+0.001)
fdat$TURB<-log(fdat$TURB+0.001)
fdat$XCMGW<-(fdat$XCMGW^.5)
fdat$XFC_NAT<-(fdat$XFC_NAT^.5)
fdat$MMI_BENT<-(fdat$MMI_BENT)
fdat$ACTIVE_bin<-ifelse(fdat$ACTIVED>0,1,0)
fdat$HUC4<-str_sub(fdat$HUC6,end=4)
temp<-stack(tapply(fdat$ACTIVED,fdat$HUC4,mean));colnames(temp)<-c('meantreat','HUC4')
temp1<-stack(tapply(fdat$ACTIVE_bin,fdat$HUC4,mean));colnames(temp1)<-c('meantreatbin','HUC4')
tempmerge<-merge(temp,temp1,by='HUC4')
fdat<-merge(fdat,tempmerge)
setwd('TScott/Google Drive/duckabush')
fdat$long<-fdat$XLON_DD.x
fdat$lat<-fdat$XLAT_DD.x
fdat$COUNTY<-ifelse(fdat$COUNTY=='Bedford','Bedford County',as.character(fdat$COUNTY))
fdat$COUNTY<-ifelse(fdat$COUNTY=='Dekalb','DeKalb County',as.character(fdat$COUNTY))
fdat$COUNTY<-ifelse(fdat$COUNTY=='Mchenry','McHenry County',as.character(fdat$COUNTY))
fdat$COUNTY<-ifelse(fdat$COUNTY=='Lewis And Clark','Lewis and Clark County',as.character(fdat$COUNTY))
fdat$COUNTY<-ifelse(fdat$COUNTY=='Clay','Clay County',as.character(fdat$COUNTY))
fdat$COUNTY<-ifelse(fdat$COUNTY=='Mclennan','McLennan County',as.character(fdat$COUNTY))
geo.place<-foreach(i = 1:nrow(fdat)) %do% geo.make(state=as.character(fdat$STATE[i]),
county=as.character(fdat$COUNTY[i]))
county.med.income<-llply(.data=geo.place,.progress='text',
.fun=acs.fetch,endyear=2011,span=5,table.number='B19301')
#All workers >16
county.tot.workers<-llply(.data=geo.place,.progress='text',col.names='pretty',
.fun=acs.fetch,endyear=2011,span=5,
table.number='B99241',variable='B99241_001')
#Agriculture, Forestry, Fishing And Hunting, And Mining
county.nat.workers<-llply(.data=geo.place,.progress='text',col.names='pretty',
.fun=acs.fetch,endyear=2011,span=5,
table.number='C24050',variable='C24050_002')
setwd('TScott/Google Drive/duckabush/elpo08p020_nt00335')
elec = readOGR(dsn='TScott/Google Drive/duckabush/elpo08p020_nt00335',
layer="elpo08p020")
elec@data$id = rownames(elec@data)
elec.points = ggplot2::fortify(elec, region="id")
elec.df = join(elec.points, elec@data, by="id")
elec.sub.df<-elec.df[elec.df$STATE!='HI'&elec.df$STATE!='AK',]
elec.sub.df$COUNTY_STATE<-paste(tolower(elec.sub.df$COUNTY),elec.sub.df$STATE,sep=', ')
elec.sub.df$COUNTY_STATE<-(gsub(' COUNTY','',elec.sub.df$COUNTY_STATE))
elec.sub.df$COUNTY_STATE<-(gsub(' parish','',elec.sub.df$COUNTY_STATE))
elec.sub.df<-elec.sub.df[duplicated(elec.sub.df$COUNTY_STATE)==FALSE,]
elec.sub.df$COUNTY_STATE<-gsub(' county', '',elec.sub.df$COUNTY_STATE)
fdat$COUNTY_STATE<-paste(tolower(fdat$COUNTY),fdat$STATE,sep=', ')
fdat$COUNTY_STATE<-gsub('st. ','saint ',fdat$COUNTY_STATE)
fdat$COUNTY_STATE<-gsub('foresaint','forest,',fdat$COUNTY_STATE)
fdat$COUNTY_STATE<-gsub(' county','',fdat$COUNTY_STATE)
temp<-data.frame(as.numeric(as.character(elec.sub.df$PERCENT_DE)),
as.numeric(as.character(elec.sub.df$PERCENT_RE)),
as.character(elec.sub.df$COUNTY_STATE))
colnames(temp)<-c("PERCENT_DE",'PERCENT_RE','COUNTY_STATE')
temp$COUNTY_STATE<-as.character(temp$COUNTY_STATE)
temp2<-join(fdat,temp,by='COUNTY_STATE')
fdat<-temp2
county.nat.work.est<-laply(county.nat.workers,estimate)
county.tot.work.est<-laply(county.tot.workers,acs::estimate)
county.nat.work.est.prop<-county.nat.work.est/county.tot.work.est
county.med.income.est<-laply(county.med.income,estimate)
county.vars<-data.frame(
fdat$COUNTY_STATE,
county.nat.work.est,county.tot.work.est,county.nat.work.est.prop,county.med.income.est)
colnames(county.vars)<-c('COUNTY_STATE',colnames(county.vars)[2:5])
county.vars$COUNTY_STATE<-as.character(county.vars$COUNTY_STATE)
fdat<-cbind(fdat,county.vars[,-1])
fdat$GROUP[is.na(fdat$GROUP)]<-0
setwd('TScott/Google Drive/duckabush')
state.fund<-read.csv('state_2007_funding.csv')
colnames(state.fund)<-c('STATE','Function','Total.Pay','Full.Time.Equivalent')
state07.total<-subset(state.fund,Function=='Total')
state07.resparks<-subset(state.fund,Function!='Total')
tem<-stack(tapply(state07.resparks$Total.Pay,state07.resparks$STATE,sum))
colnames(tem)<-c('resparks.spend','STATE')
state07.spend<-join(state07.total,tem)
state07.spend$resparks.ratio<-state07.spend$resparks.spend/state07.spend$Total.Pay
state.df<-data.frame(cbind(state.abb,state.name))
colnames(state.df)<-c('state.abb','STATE')
state07.spend<-join(state07.spend,state.df)
colnames(state07.spend)<-c('sname','Function','Total.Pay','Full.Time.Equivalent',
'resparks.spend','resparks.ratio','STATE')
fdat<-join(fdat,state07.spend)
fdat$county.med.income.est.mc<-(fdat$county.med.income.est-mean(fdat$county.med.income.est))/1000
fdat$county.nat.work.est.prop<-log(fdat$county.nat.work.est.prop)
fdat$PERCENT_DE<-fdat$PERCENT_DE-mean(fdat$PERCENT_DE)
fdat$resparks.ratio<-fdat$resparks.ratio-mean(fdat$resparks.ratio)
write.csv(fdat,'model.dat.csv')
save.image("dat.lmer.mods.RData")
install.packages('sp')
install.packages('rgdal',type='source')
setwd('//Users/TScott/Google Drive/duckabush')
list.files()
load('dat.lmer.mods.RData')
rm(list=ls()[ls()!='fdat'])
dat=fdat
dat$ACT3<-ifelse(dat$ACTIVED>=3,1,0)
dat$STRAHLER<-ifelse(dat$STRAHLER>5,5,dat$STRAHLER)
dat$STRAHLER<-ifelse(dat$STRAHLER==0,1,dat$STRAHLER)
pform<-ACT3~huc8imperv+huc8crop+huc8past+HUC8AreaSqKm+POPDENS+
huc8npdespermits +(1|STATE)+(1|HUC4)
library(inline)
library(Rcpp)
library(inline)
library(Rcpp)
src <- '
std::vector<std::string> s;
s.push_back("hello");
s.push_back("world");
return Rcpp::wrap(s);
'
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
cat(hellofun(), '\n')
library(rstan)
set_cppo('fast')
detach("package:rstan", unload = TRUE)
remove.packages('rstan')
Sys.getenv("HOME")
if (!file.exists("~/.R/Makevars")) {
cat('CXX=g++ -arch x86_64 -ftemplate-depth-256 -stdlib=libstdc++\n
CXXFLAGS="-mtune=native  -O3 -Wall -pedantic -Wconversion"\n',
file="~/.R/Makevars");
} else {
file.show("~/.R/Makevars");
}
options(repos = c(getOption("repos"), rstan = "http://wiki.rstan-repo.googlecode.com/git/"))
install.packages('rstan', type = 'source')
install.packages("rstan", type = "source")
